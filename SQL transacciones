/* Exercici 1. Programar un procediment anomenat insertardept_tran que insereixi un nou departament tenint en compte les següents observacions:
a) l’usuari introduirà el nom del departament, el cap (manager) i el codi de la localitat.
b) el codi del departament serà la desena següent al número més gran de la taula.
c) s’ha de gestionar possibles errors.
d) s’ha de gestionar la transacció, desant o desfent els canvis.*/

create or replace function comprovar_camps (employees.employee_id%type, locations.location_id%type) returns boolean language plpgsql as $$
    declare
        man employees.employee_id%type;
        loc locations.location_id%type;

    begin
        select employee_id into strict man from employees where employee_id=$1;
        Select location_id into strict loc from locations where location_id=$2;
        return true;
    exception
        when no_data_found then
            Raise exception 'El manager o la localització introduida no existeixen'
                using hint = 'Introdueix valors vàlids!';
    end;$$;
    
CREATE OR REPLACE PROCEDURE insertardept_tran
(var_nomdept departments.department_name%type,var_manager departments.manager_id%type, var_locid departments.location_id%type)  language plpgsql as $$
declare
	var_departid departments.department_id%TYPE;

BEGIN
    SELECT MAX(department_id) + 10
    INTO var_departid
    FROM departments;
    INSERT INTO departments
	VALUES (var_departid,var_nomdept,var_manager,var_locid);
	commit;
END;$$;

do $$
declare
	var_nomdept departments.department_name%TYPE:=:nom_dept;
	var_locid departments.location_id%TYPE:=:loc_id;
	var_manager employees.employee_id%TYPE:=:manager_id;
BEGIN
 if (select (comprovar_camps(var_manager, var_locid))) is true then
	call insertardept_tran(var_nomdept,var_manager,var_locid);
end if;

END;$$ language plpgsql;

/* Exercici 2. Programar un procediment anomenat insertaremp_tran que rebi totes les dades d’un nou empleat i processi la transacció d’alta. S’ha de tenir en compte les següents
observacions:
a) l’usuari introduirà les dades corresponents. En cas de que els camps que són obligatoris no siguin introduïts per l’usuari s’ha de donar el missatge corresponent i aturar la inserció corresponent desfent els canvis.
b) s’ha de gestionar possibles errors.
c) s’ha de gestionar la transacció, desant o desfent els canvis.
d) programar un script per a comprovar que funciona el procediment.*/

create or replace function comprovar_dades_empl (employees.employee_id%type, employees.email%type, employees.job_id%type) returns boolean language plpgsql as $$
    declare
        empl employees.employee_id%type;
        mail  employees.email%type;
        jid employees.job_id%type;

    begin
     select employee_id, email, job_id
     into empl, mail, jid
     from employees where employee_id=$1 and email=$2 and job_id!=$3;
     if not found then
         return false;
     else
        return true;
    end if;
    end;$$;

Create or replace procedure insertaremp_tran (employees.employee_id%type, employees.last_name%type,  employees.job_id%type, employees.salary%type)  language plpgsql as $$
    declare
        empl employees.employee_id%type;
        mail  employees.email%type:= concat($2,'@itb.cat');
        jid employees.job_id%type;
        hdate date:=current_date;

    begin

        if (Select comprovar_dades_empl($1, mail,$3)) is false then
            insert into employees (employee_id, last_name, email, hire_date, job_id, salary)
                  values ($1, $2, mail, hdate, $3,$4);
              raise notice 'Dades introduides correctament!';
            commit;
        else
            raise notice 'Error en les dades introuides';
            end if;
    end;$$;

call insertaremp_tran(9991,'pepe','IT_PROG',15000);

/* Exercici 3. Programar un procediment anomenat modifremp_tran que rebi com a paràmetre el codi del departament 
i modifiqui el salari de tots els empleats que pertanyen a aquest departament. S’ha de tenir en compte les següents observacions:
a) l’usuari ha d’introduir un import i un percentatge per aplicar-li al càlcul del salari. Aquest dos valors
se li passarà com a paràmetre al procediment. L’augment del salari anirà en funció del percentatge
o de l’import indicat i s’aplicarà el que sigui més beneficiós per a l’empleat. (Pista: la funció que es pot utilitzar es GREATEST).
b) les quantitats no poden ser negatius.
c) s’ha de gestionar possibles errors.
d) s’ha de gestionar la transacció, desant o desfent els canvis.
e) programar un script per a comprovar que funciona el procediment.*/

create or replace function revisar_negatiu (numeric, numeric) returns boolean language plpgsql as $$
    declare
    begin
        if ($1 >=0 or $2 >= 0) then
            return true;
        else
            return false;
        end if;
    end;$$;


create or replace procedure modifremp_tran (departments.department_id%type, employees.salary%type, numeric) language plpgsql as $$
declare

    begin
        if (select revisar_negatiu($2,$3)) is true then
            update employees
            set salary=greatest(salary, $2*(1+$3*0.01))
            where department_id=$1;
            commit;
            raise notice 'S`ha actualitzat els salaris dels empleats del departament %, en un % percent',$1,$3;
        else
            raise notice 'El salari o percentatge no pot ser negatiu';
        end if;
end;$$;

call modifremp_tran(10,100,0.1);

select salary from employees where department_id=10;

/* Exercici 4. Programar un procediment anomenat borraremp_tran que esborri un empleat on el codi de l’empleat se li passarà com a paràmetre. Al procediment s’ha de comprovar si existeix o no l’empleat. S’ha de tenir en compte les següents observacions:
a) l’usuari ha d’introduir el codi de l’empleat. Aquest valor se li passarà com a paràmetre al procediment.
b) per a comprovar si existeix o no l’empleat, es farà mitjançant una funció anomenada buscar_emp (que pot ser ja està creada).
c) per a què l’eliminació sigui fiable, s’ha de fer ús del ROWID.
d) s’ha de gestionar possibles errors. A més, si existeix l’empleat esborrar-lo i sinó donar el missatge corresponent.
e) s’ha de gestionar la transacció, desant o desfent els canvis.
f) programar un script per a comprovar que funciona el procediment.*/

CREATE OR REPLACE FUNCTION exist_emp(numeric) RETURNs numeric language plpgsql as $$
declare
	existe numeric;
	esta employees.employee_id%type;
BEGIN
	SELECT first_name
	INTO esta
	FROM employees
	WHERE employee_id = $1;
	if found then
	existe := 1;
	else
	existe:=0;
	end if;
	return (existe);
END;$$;

select exist_emp(800);
CREATE OR REPLACE PROCEDURE borraremp_tran (codi_emp employees.employee_id%type) language plpgsql as $$
BEGIN
	if (select (exist_emp(codi_emp)) = 1) then
		DELETE FROM employees
		where employee_id = codi_emp;
		commit;
		raise notice 'se ha eliminado correctamente';
		elsif (select (exist_emp(codi_emp)) = 0) then
			raise notice 'Error l`usuari no existeix';
		end if;
	END;$$;

Call borraremp_tran(9991);
