/* Exercici 1:
Programar un trigger esmentat nom_departament_notnull que s’activarà quan no s’especifiqui el nom del departament al donar d’alta un departament nou a la taula departments.*/

CREATE OR REPLACE FUNCTION nom_departament_notnull()  RETURNS TRIGGER  LANGUAGE PLPGSQL AS $$
BEGIN
  IF NEW.department_name is null THEN
      RAISE ' El nom del departament no pot nul';
	END IF;
 RETURN NEW;
END;$$;

CREATE TRIGGER before_insert_nom_dept BEFORE INSERT 
 ON departments
  FOR EACH ROW
  EXECUTE PROCEDURE nom_departament_notnull();

insert into departments values (280, null, 120, 1700);

/* Exercici 2:
Programar un trigger associat a la taula Employees. El trigger s’anomenarà restriccions_emp i ha de controlar les següents situacions:
Quan inserim un nou empleat no pot tenir un salari negatiu.
Quan modifiquem les dades d’un empleat, si es modifica el camp salari, només es podrà incrementar i només si té comissió al camp commission_pct.*/

CREATE OR REPLACE FUNCTION restriccions_emp()  RETURNS TRIGGER  LANGUAGE PLPGSQL AS $$
BEGIN
  IF NEW.salary<0 THEN
      RAISE 'El salary no pot ser negatiu';
  elsif NEW.SALARY<OLD.SALARY THEN
	  RAISE 'El nou salari no pot ser inferior a l´antic';
  elsIF OLD.COMMISSION_PCT IS NULL then
      RAISE 'L´empleat no té comissió, per aquest motiu no se li pot incrementar el salari';
  END IF;
 RETURN NEW;
END;$$;

CREATE TRIGGER before_insert_update_restriccions BEFORE INSERT or UPDATE
 ON EMPLOYEES
  FOR EACH ROW
  EXECUTE PROCEDURE restriccions_emp();

insert into employees (employee_id, last_name, email, hire_date, job_id, salary)
 values (380,'PROVA', 'PROVA@PROVA.COM','01/01/2021','IT_PROG',-90000);
 insert into employees (employee_id, last_name, email, hire_date, job_id, salary)
 values (380,'PROVA', 'PROVA@PROVA.COM','01/01/2021','IT_PROG',-90000);

/*Exercici 3:
Programar un trigger que comprovi que la comissió mai sigui més gran que el salari a l’hora d’inserir un empleat. El disparador s’anomenarà comissio i s’ha de comprovar que funciona fent una inserció.*/

CREATE OR REPLACE FUNCTION ex3_triggers() RETURNS TRIGGER  LANGUAGE PLPGSQL AS $$
BEGIN
  IF NEW.COMMISSION_PCT>NEW.SALARY THEN 
      RAISE 'Error! La comissió no pot ser més gran que el salary!';
  END IF;
 RETURN NEW;
END;$$;

CREATE TRIGGER before_insert_ex3 BEFORE INSERT 
 ON EMPLOYEES
  FOR EACH ROW
  EXECUTE PROCEDURE ex3_triggers();

insert into employees (employee_id, last_name, email, hire_date, job_id, salary, commission_pct)
 values (380,'PROVA', 'PROVA@PROVA.COM','01/01/2021','IT_PROG',0.10,0.90);

/

/*Exercici 4:
Programar un trigger que faci fallar qualsevol operació de modificació del first_name o del codi de l’empleat o que suposi una pujada de sou superior al 10%. El disparador s’anomenarà errada_modificacio.*/

CREATE OR REPLACE FUNCTION errada_modificacio() RETURNS TRIGGER  LANGUAGE PLPGSQL AS $$
BEGIN
  IF NEW.SALARY > (OLD.SALARY*1.10) THEN
    RAISE 'ERROR: El salari no es pot augmentar més d´un 10';
  ELSIF NEW.FIRST_NAME != OLD.FIRST_NAME THEN
    RAISE 'ERROR: El nom no es pot modificar';
  ELSIF NEW.EMPLOYEE_ID != OLD.EMPLOYEE_ID THEN
    RAISE 'ERROR: El codi d´empleat no es pot modificar';
  END IF;
 RETURN NEW;
END;$$;


CREATE TRIGGER before_errada_modificacio BEFORE UPDATE 
 ON EMPLOYEES
  FOR EACH ROW
  EXECUTE PROCEDURE errada_modificacio();

hr# select salary from employees where employee_id=360;
  salary  
----------
 30393.00

UPDATE employees set salary=45000 WHERE employee_id=360;


hr=# select first_name from employees where employee_id=360;
 first_name 
------------
 Karen
(1 fila)


UPDATE employees set first_name='Pepe' WHERE employee_id=360;

UPDATE employees set employee_id=188828 where employee_id=360;

/*Exercici 5:
Programar un trigger anomenat auditartaulaemp i que permeti auditar les operacions d’inserció o d’esborrat dades que es realitzaran a la taula employees. El resultat de l’auditoria es guardarà a una nova taula de la base de dades anomenada resauditaremp. Les especificacions que s’han de tenir en compte són les següents: 
Crear la taula resauditaremp amb un únic camp anomenat resultat VARCHAR(200). 
Quan es produeixi qualsevol operació (inserció, esborrat i/o actualitzar) sobre la taula employees, s’inserirà una fila en la taula resauditaremp. El contingut d’aquesta fila serà la data i hora que s’ha fet l’operació sobre la taula i el codi i cognom de l’empleat.*/

DROP TABLE RESAUDITAREMP;
CREATE TABLE RESAUDITAREMP(RESULTAT VARCHAR(200));


CREATE OR REPLACE FUNCTION AUDITARTAULAEMP() RETURNS TRIGGER language plpgsql AS $$
  BEGIN
   INSERT INTO RESAUDITAREMP (RESULTAT)
      VALUES (CONCAT (TG_NAME,'-',TG_WHEN,'-',TG_LEVEL,'-', TG_OP,'-', NOW()));
   RETURN NULL;
  END;$$;

CREATE TRIGGER BEFORE_AUDITARTAULAEMP BEFORE INSERT OR UPDATE OR DELETE
 ON EMPLOYEES
  FOR EACH ROW
  EXECUTE PROCEDURE AUDITARTAULAEMP();
  
  
